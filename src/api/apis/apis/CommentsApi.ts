/* tslint:disable */
/* eslint-disable */
/**
 * Lazy.App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddCommentRequest,
  CommentResponse,
  ProblemDetails,
  UpdateCommentRequest,
} from '../models/index';
import {
    AddCommentRequestFromJSON,
    AddCommentRequestToJSON,
    CommentResponseFromJSON,
    CommentResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateCommentRequestFromJSON,
    UpdateCommentRequestToJSON,
} from '../models/index';

export interface ApiCommentsIdDeleteRequest {
    id: string;
}

export interface ApiCommentsIdGetRequest {
    id: string;
}

export interface ApiCommentsPostRequest {
    addCommentRequest: AddCommentRequest;
}

export interface ApiCommentsPutRequest {
    updateCommentRequest: UpdateCommentRequest;
}

/**
 * CommentsApi - interface
 * 
 * @export
 * @interface CommentsApiInterface
 */
export interface CommentsApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    apiCommentsIdDeleteRaw(requestParameters: ApiCommentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiCommentsIdDelete(requestParameters: ApiCommentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    apiCommentsIdGetRaw(requestParameters: ApiCommentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentResponse>>;

    /**
     */
    apiCommentsIdGet(requestParameters: ApiCommentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentResponse>;

    /**
     * 
     * @param {AddCommentRequest} addCommentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    apiCommentsPostRaw(requestParameters: ApiCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiCommentsPost(requestParameters: ApiCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {UpdateCommentRequest} updateCommentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    apiCommentsPutRaw(requestParameters: ApiCommentsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiCommentsPut(requestParameters: ApiCommentsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class CommentsApi extends runtime.BaseAPI implements CommentsApiInterface {

    /**
     */
    async apiCommentsIdDeleteRaw(requestParameters: ApiCommentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCommentsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCommentsIdDelete(requestParameters: ApiCommentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCommentsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCommentsIdGetRaw(requestParameters: ApiCommentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCommentsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentsIdGet(requestParameters: ApiCommentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentResponse> {
        const response = await this.apiCommentsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentsPostRaw(requestParameters: ApiCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addCommentRequest'] == null) {
            throw new runtime.RequiredError(
                'addCommentRequest',
                'Required parameter "addCommentRequest" was null or undefined when calling apiCommentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCommentRequestToJSON(requestParameters['addCommentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCommentsPost(requestParameters: ApiCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCommentsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCommentsPutRaw(requestParameters: ApiCommentsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateCommentRequest'] == null) {
            throw new runtime.RequiredError(
                'updateCommentRequest',
                'Required parameter "updateCommentRequest" was null or undefined when calling apiCommentsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/comments`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCommentRequestToJSON(requestParameters['updateCommentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCommentsPut(requestParameters: ApiCommentsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCommentsPutRaw(requestParameters, initOverrides);
    }

}
