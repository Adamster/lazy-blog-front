/* tslint:disable */
/* eslint-disable */
/**
 * Lazy.App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  TagResponse,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TagResponseFromJSON,
    TagResponseToJSON,
} from '../models/index';

export interface ApiTagsIdPutRequest {
    id: string;
    tag?: string;
}

export interface ApiTagsSearchTermGetRequest {
    searchTerm: string;
}

/**
 * TagsApi - interface
 * 
 * @export
 * @interface TagsApiInterface
 */
export interface TagsApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {string} [tag] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    apiTagsIdPutRaw(requestParameters: ApiTagsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiTagsIdPut(requestParameters: ApiTagsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} searchTerm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    apiTagsSearchTermGetRaw(requestParameters: ApiTagsSearchTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagResponse>>>;

    /**
     */
    apiTagsSearchTermGet(requestParameters: ApiTagsSearchTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagResponse>>;

}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI implements TagsApiInterface {

    /**
     */
    async apiTagsIdPutRaw(requestParameters: ApiTagsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTagsIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTagsIdPut(requestParameters: ApiTagsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTagsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTagsSearchTermGetRaw(requestParameters: ApiTagsSearchTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagResponse>>> {
        if (requestParameters['searchTerm'] == null) {
            throw new runtime.RequiredError(
                'searchTerm',
                'Required parameter "searchTerm" was null or undefined when calling apiTagsSearchTermGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/{searchTerm}`.replace(`{${"searchTerm"}}`, encodeURIComponent(String(requestParameters['searchTerm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagResponseFromJSON));
    }

    /**
     */
    async apiTagsSearchTermGet(requestParameters: ApiTagsSearchTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagResponse>> {
        const response = await this.apiTagsSearchTermGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
